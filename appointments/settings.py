"""
Django settings for appointments project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import environ
import os
from pathlib import Path
from django.contrib.messages import constants as messages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
PROJECT_ROOT = os.path.join(os.path.dirname(os.path.abspath(__file__)), os.pardir)

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = ['127.0.0.1', '.vercel.app']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Custom App
    'frontend',
    'backend',

    # Library/Plugins
    'crispy_forms',
    'crispy_bootstrap5',
    'django_filters',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'appointments.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'appointments.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

if env('ENVIRONMENT') == 'DEV':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
	DATABASES = {
		'default': {
			'ENGINE': env("S_ENGINE"),
            'HOST': env("S_HOST"),
			'NAME': env("S_NAME"),
            'USER': env("S_USER"),
            'PASSWORD': env("S_PASSWORD"),
			'PORT': env("S_PORT"),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kuala_Lumpur'

USE_I18N = True

USE_L10N = False

USE_TZ = True

DATETIME_FORMAT = 'd.m.Y h:i A'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

if env('ENVIRONMENT') == 'DEV':
	# Configuration
	STATIC_ROOT = os.path.join(BASE_DIR, 'static')
	STATIC_URL = '/static/'

	MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
	MEDIA_URL = '/media/'
else:
	# Configuration
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_build', 'static')
    STATIC_URL = '/static/'

    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    MEDIA_URLS ='/media/'
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Bootstrap Template
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# User Model
AUTH_USER_MODEL = 'backend.User'

# Session Redirect URL
LOGIN_URL = 'login_view'
LOGIN_REDIRECT_URL = 'dashboard_view'
LOGOUT_REDIRECT_URL = 'login_view'

if env('ENVIRONMENT') == 'DEV':
    EMAIL_BACKEND = env('L_EMAIL_BACKEND')
    EMAIL_HOST = env('L_EMAIL_HOST')
    EMAIL_PORT = env('L_EMAIL_PORT')
    EMAIL_USE_TLS = env('L_EMAIL_USE_TLS')
    EMAIL_HOST_USER = env('L_EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = env('L_EMAIL_HOST_PASSWORD')
else:
    EMAIL_BACKEND = env('S_EMAIL_BACKEND')
    EMAIL_HOST = env('S_EMAIL_HOST')
    EMAIL_PORT = env('S_EMAIL_PORT')
    EMAIL_USE_TLS = env('S_EMAIL_USE_TLS')
    EMAIL_HOST_USER = env('S_EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = env('S_EMAIL_HOST_PASSWORD')

# message tags
MESSAGE_TAGS = {
    messages.ERROR: 'danger',
}